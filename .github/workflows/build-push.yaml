name: Build and Push Docker Image

on:
  push:
    branches:
      - development        # ‚úÖ Only runs on push to development
    tags:
      - "v*.*.*"           # ‚úÖ Tags trigger (production)
      - "v*.*.*-alpha"     # ‚úÖ Tags trigger (staging)

jobs:
  build-and-push:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # required for branch/tag validation

      # --- ENFORCE TAG RULES (ONLY when it's a tag event) ---
      - name: Enforce tag and branch rules
        if: startsWith(github.ref, 'refs/tags/')
        run: |
          ref="${GITHUB_REF}"
          tag="${GITHUB_REF_NAME}"
          tag_pattern_main='^v[0-9]+\.[0-9]+\.[0-9]+$'
          tag_pattern_staging='^v[0-9]+\.[0-9]+\.[0-9]+-alpha$'

          commit_sha=$(git rev-list -n 1 "$tag")
          branch=$(git branch -r --contains "$commit_sha" | sed 's/ *origin\///' | head -n 1)

          echo "üß© Tag: $tag"
          echo "üîç Commit: $commit_sha"
          echo "üåø Detected branch: $branch"

          # --- Disallow tagging in development ---
          if [[ "$branch" == "development" ]]; then
            echo "::error::‚ùå Tagging is not allowed on the 'development' branch."
            echo "üí° Merge 'development' ‚Üí 'staging' or 'main' first, then tag."
            exit 1
          fi

          # --- Main branch tags (vX.Y.Z only) ---
          if [[ "$tag" =~ $tag_pattern_main ]]; then
            if [[ "$branch" != "main" ]]; then
              echo "::error::‚ùå Tag '$tag' is only allowed on the 'main' branch."
              echo "üí° Merge into 'main' and tag there for production releases."
              exit 1
            fi
          # --- Staging branch tags (-alpha only) ---
          elif [[ "$tag" =~ $tag_pattern_staging ]]; then
            if [[ "$branch" != "staging" ]]; then
              echo "::error::‚ùå Alpha tag '$tag' is only allowed on the 'staging' branch."
              echo "üí° Merge into 'staging' and tag there for alpha releases."
              exit 1
            fi
          else
            echo "::error::‚ùå Invalid tag format '$tag'."
            echo "üí° Use 'vX.Y.Z' for main or 'vX.Y.Z-alpha' for staging."
            exit 1
          fi

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GHCR_TOKEN }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      # ---- DEVELOPMENT BUILD ----
      - name: Build and push Docker image (development)
        if: github.ref == 'refs/heads/development'
        uses: docker/build-push-action@v6
        with:
          file: ./Dockerfile.dev
          context: .
          push: true
          tags: ghcr.io/${{ github.repository }}:dev-${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      # ---- STAGING BUILD (alpha tag) ----
      - name: Build and push Docker image (staging)
        if: startsWith(github.ref, 'refs/tags/v') && endsWith(github.ref, '-alpha')
        uses: docker/build-push-action@v6
        with:
          file: ./Dockerfile.staging
          context: .
          push: true
          tags: ghcr.io/${{ github.repository }}:${{ github.ref_name }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      # ---- PRODUCTION BUILD (main tag) ----
      - name: Build and push Docker image (production)
        if: startsWith(github.ref, 'refs/tags/v') && !endsWith(github.ref, '-alpha')
        uses: docker/build-push-action@v6
        with:
          file: ./Dockerfile
          context: .
          push: true
          tags: ghcr.io/${{ github.repository }}:${{ github.ref_name }}
          cache-from: type=gha
          cache-to: type=gha,mode=max